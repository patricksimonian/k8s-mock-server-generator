{{- $protosUsed := .UseProtos }}
{{- $ep := index .Endpoints 0 }} 
// endpoint-route.ts.tmpl
import express from 'express';
import { KubeResource, Storage } from '../storage/Storage';
import { logger } from '../logger';
import { getPrimaryContainer, handleResourceError, decodeFramedProtobuf } from '../utils';
{{- if and (eq $protosUsed true) (ne $ep.ProtoImportPath "") }}
import protobuf from "protobufjs";
import path from 'path';
{{- end }}
export async function create{{ .ResourceType }}Routes(storage: Storage): Promise<express.Router> {
  const router = express.Router();
  {{- if and (eq $protosUsed true) (ne $ep.ProtoImportPath "") }}
  logger.info('Loading protobuf definitions for {{ .ProtoImportPath }}');
    const protoRoot = new protobuf.Root();

  // Override the resolvePath method to tell protobufjs where to find import targets
  protoRoot.resolvePath = function (origin, target) {
    console.log('target', target)
    const fullPath = path.resolve(__dirname, "../protos", target.replace('k8s.io', 'k8s/io'));
    return fullPath;
  };
  let root: protobuf.Root | null = null;
  try {
    root = protoRoot.loadSync(path.resolve(__dirname, "../protos/{{ .ProtoImportPath }}"), 
  );
  } catch (e) {
    logger.info('Error loading protobuf definitions: {{ .ProtoImportPath }}');
    root = null;
  }
  {{- end }}

  {{- range .Endpoints }}
  {{- if eq .Method "patch" }}
  router.patch('{{ .Path }}', async (req, res, next) => {
    try {
      const name = req.params.name;
      const patchData = req.body;
      const contentType = req.get('Content-Type');
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Patching {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Getting {{ $.ResourceType }} ${name}`);
      {{- end }}

      {{- if .Operational }}
      const subresource = "{{ getSubresource .Path }}";

      const resourceVersion = patchData.metadata && patchData.metadata.resourceVersion || undefined; 
      const updatedResource = await storage.updateSubresource('{{ $.ResourceType }}', name, subresource, patchData, namespace);
      return res.json(updatedResource);
      {{- else }}
      const resource = await storage.getResource('{{ $.ResourceType }}', name, namespace);
      
      if (!resource) {
        return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found in namespace ${namespace}`), res);
      }
      
      if (
        contentType === 'application/strategic-merge-patch+json' ||
        contentType === 'application/merge-patch+json'
      ) {
        // JSON merge patch: recursively merge the patch with the existing resource
        const updatedResource = await storage.mergePatchResource('{{ $.ResourceType }}', name, patchData, namespace, resource.metadata.resourceVersion);
        return res.json(updatedResource);
      } else if (contentType === 'application/json-patch+json') {
        // JSON patch: apply an array of operations
        try {
          const updatedResource = await storage.jsonPatchResource('{{ $.ResourceType }}', name, patchData, namespace, resource.metadata.resourceVersion);

          return res.json(updatedResource);
        } catch (error) {
          return res.status(400).json({ error: 'Invalid JSON patch data' });
        }
      } else {
        return res.status(415).json({ error: 'Unsupported Media Type' });
      }
      {{- end }}
    } catch (error) {
      next(error);
    }
  });
  {{- end }}


  {{- if eq .Method "get" }}
  {{- $subResource := getSubresource .Path }}
    {{- $parts := split .Path "/" }}
  {{- $lastPart := index $parts (sub (len $parts) 1) }}
  {{- $secondLastPart := index $parts (sub (len $parts) 2) }}
  {{- if or (eq $lastPart ":name") (eq $secondLastPart ":name") }}

// {{- .Description }}
  router.get('{{ .Path }}', async (req, res, next) => {
  {{- if .Operational }}
 
  // the subresource {{- $subResource }}
    {{- if or (eq $subResource "exec") (eq $subResource "attach") (eq $subResource "proxy") (eq $subResource "portforward") (eq $subResource "attach") (eq $subResource "binding")}}
    logger.info(`{{ .Path }} not supported`);
    res.status(405).json({
      kind: 'Status',
      apiVersion: 'v1',
      metadata: {},
      status: 'Failure',
      reason: 'MethodNotAllowed',
      message: 'Method not allowed'
    });
    return;
    {{- else if (eq $subResource "log") }}
        const { namespace, name } = req.params;
        const cluster = "default"; // or extract if you support multi-cluster
        let container = req.query.container as string;

        const follow = req.query.follow === 'true';
        const stdout = req.query.stdout !== 'false'; // default true
        const stderr = req.query.stderr !== 'false'; // default true

        try {
          // Get container if not specified
          if (!container) {
            const pod = await storage.getResource("Pod", name, namespace);
            if ("status" in pod) {
              return res.status(pod.code || 500).json(pod);
            }
            container = getPrimaryContainer(pod);
          }

          const logStream = await storage.readLogs(name, namespace, container, cluster, {
            follow,
            stdout,
            stderr
          });

          if ("status" in logStream) {
            return res.status(logStream.code || 500).json(logStream);
          }

          res.setHeader("Content-Type", "text/plain");
          logStream.pipe(res);
        } catch (err) {
          logger.error("Error fetching logs:", err);
          res.status(500).send("Internal server error.");
        }
    {{- else }}
      try {
        const name = req.params.name;
        {{- if .Namespaced }}
        const namespace = req.params.namespace;
        logger.info(`Getting {{ $subResource }} ${name} in namespace ${namespace}`);
        {{- else }}
        const namespace = null;
        logger.info(`Getting {{ $subResource }} ${name}`);
        {{- end }}
        
        const resource = await storage.getResource('{{ $subResource }}', name, namespace);
        
        if (!resource) {
          return handleResourceError(new Error(`{{ $subResource }} ${name} not found in namespace ${namespace}`), res);
        }
        res.json(resource);
      } catch (error) {
        next(error);
      }
    {{- end }}
    {{- else }}
    try {
      const name = req.params.name;
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Getting {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Getting {{ $.ResourceType }} ${name}`);
      {{- end }}
      
      const resource = await storage.getResource('{{ $.ResourceType }}', name, namespace);
      
      if (!resource) {
        return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found in namespace ${namespace}`), res);
      }
         res.json(resource);
    } catch (error) {
      next(error);
    }
    {{- end }}
  
   
  });
  {{- else }}

// {{- .Description }}
  router.get('{{ .Path }}', async (req, res, next) => {
    try {
      const labelSelector = req.query.labelSelector as string | undefined;
      const fieldSelector = req.query.fieldSelector as string | undefined;
      const limit = req.query.limit ? Number(req.query.limit) : undefined;
      const cont = req.query.continue as string | undefined;
      const listOpts = { labelSelector, fieldSelector, limit, continue: cont };
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Listing {{ $.ResourceType }} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Listing {{ $.ResourceType }}`);
      {{- end }}
      
      const resourceList = await storage.listResources('{{ $.ResourceType }}', namespace, listOpts);
      

      
      res.json(resourceList);
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  {{- end }}
  
{{- if eq .Method "post" }}
  // {{- .Description }}
  router.post('{{ .Path }}', async (req, res, next) => {

  {{- if .Operational }}
  {{- $subResource := getSubresource .Path }}
    {{- if or (eq $subResource "exec") (eq $subResource "attach") (eq $subResource "proxy") (eq $subResource "portforward") (eq $subResource "attach") (eq $subResource "binding")}}
    logger.info(`{{ .Path }} not supported`);
    res.status(405).json({
      kind: 'Status',
      apiVersion: 'v1',
      metadata: {},
      status: 'Failure',
      reason: 'MethodNotAllowed',
      message: 'Method not allowed'
    });
    return;
    {{- else }}
     const resource = req.body;
     // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      const namespace = req.params.namespace;
      logger.info(`Creating ${resource.kind} in namespace ${namespace}`);
      const createdResource = await storage.createResource(resource as KubeResource, namespace);
      res.status(201).json(createdResource); 
    {{- end }}
  {{- else }}

    try {
      let resource: KubeResource | undefined;
      {{- if and (eq $protosUsed true) (ne $ep.ProtoImportPath "") }}
      
      if (req.is('application/vnd.kubernetes.protobuf')) {
        const chunks: Buffer[] = [];
        req.on('data', (chunk) => chunks.push(chunk));
        req.on('end', async () => {
          let Message: protobuf.Type | null = null;
          let Envelope: protobuf.Type | null = null;
          try {
            if (root !== null) {
              Message = root.lookupType('{{ .ProtoMessage }}');
              Envelope = root.lookupType("k8s.io.apimachinery.pkg.runtime.Unknown");
            }
          } catch (e) {
            logger.error('Error loading protobuf message: {{ .ProtoMessage }}', e);
            Message = null;
          }
          // should check for null of message
          const rawBody = Buffer.concat(chunks);
          const framed = decodeFramedProtobuf(rawBody, Envelope) // Decode protobuf
          const message = Message.decode(framed.raw)
          const object = Message.toObject(message, {
            longs: Number,
            enums: String,
            defaults: true,
          })
          resource = object as unknown as KubeResource;
          resource.kind = framed.typeMeta.kind
          resource.apiVersion = framed.typeMeta.apiVersion
      {{- if .Namespaced }}
        const namespace = req.params.namespace;
        logger.info(`Creating {{ $.ResourceType }} in namespace ${namespace}`);
        // Set namespace in metadata
        resource.metadata.namespace = namespace;
      {{- else }}
        logger.info(`Creating {{ $.ResourceType }}`);
        const namespace = null;
      {{- end }}

        const createdResource = await storage.createResource(resource as KubeResource, namespace);
        res.status(201).json(createdResource);
      });
      } else {
      // is application/json 
      resource = req.body as KubeResource;
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Creating {{ $.ResourceType }} in namespace ${namespace}`);
      
      
      // Set namespace in metadata
      resource.metadata.namespace = namespace;
      {{- else }}
      logger.info(`Creating {{ $.ResourceType }}`);
      const namespace = null;
      {{- end }}
      
      
      const createdResource = await storage.createResource(resource as KubeResource, namespace);
      
      res.status(201).json(createdResource);
      }

      {{- end }}

    } catch (error) {
      next(error);
    }
  {{- end }}
  });
  {{- end }}
  
  {{- if eq .Method "put" }}
// {{- .Description }}
  router.put('{{ .Path }}', async (req, res, next) => {
    try {
      const name = req.params.name;
      const resource = req.body;
      // Ensure resource has metadata
      if (!resource.metadata) {
        resource.metadata = {};
      }
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      resource.metadata.namespace = namespace;
      logger.info(`Updating {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Updating {{ $.ResourceType }} ${name}`);
      {{- end }}

      // Set name and namespace in metadata
      resource.metadata.name = name;
      {{- if .Operational }}
      const subresource = "{{ getSubresource .Path }}";
      const resourceVersion = resource.metadata && resource.metadata.resourceVersion || undefined; 
      const updatedResource = await storage.updateSubresource('{{ $.ResourceType }}', name, subresource, resource, namespace);
      {{- else }}

      const updatedResource = await storage.updateResource('{{ $.ResourceType }}', name, resource, namespace, resource.metadata.resourceVersion);
      {{- end }}
      
      res.json(updatedResource);
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  
  {{- if eq .Method "delete" }}
  {{- $parts := split .Path "/" }}
  {{- $lastPart := index $parts (sub (len $parts) 1) }}
  {{- if eq $lastPart ":name" }}

// {{- .Description }}
  router.delete('{{ .Path }}', async (req, res, next) => {
    try {
      const name = req.params.name;
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Deleting {{ $.ResourceType }} ${name} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Deleting {{ $.ResourceType }} ${name}`);
      {{- end }}
      try {

        const deleted = await storage.deleteResource('{{ $.ResourceType }}', name, namespace);
        
        if (!deleted) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not found in namespace ${namespace}`), res);
        }
      } catch(e) {
          return handleResourceError(new Error(`{{ $.ResourceType }} ${name} not deleted in namespace ${namespace}. Error: ${(e as Error).message}`), res);
      }
      
      res.status(200).json({
        kind: 'Status',
        apiVersion: 'v1',
        metadata: {},
        status: 'Success',
        details: {
          name: name,
          kind: '{{ $.ResourceType }}'
        }
      });
    } catch (error) {
      next(error);
    }
  });
  {{- else }}

// {{- .Description }}
  router.delete('{{ .Path }}', async (req, res, next) => {
    try {
      const labelSelector = req.query.labelSelector as string | undefined;
      const fieldSelector = req.query.fieldSelector as string | undefined;
      {{- if .Namespaced }}
      const namespace = req.params.namespace;
      logger.info(`Deleting all {{ $.ResourceType }} in namespace ${namespace}`);
      {{- else }}
      const namespace = null;
      logger.info(`Deleting all {{ $.ResourceType }} ${namespace}`);
      {{- end }}
      try {

        const deleted = await storage.deleteAllResources('{{ $.ResourceType }}', namespace, { labelSelector, fieldSelector });
        
        if (!deleted) {
          return handleResourceError(new Error(`{{ $.ResourceType }} not found in namespace ${namespace}`), res);
        }
      } catch(e) {
          return handleResourceError(new Error(`{{ $.ResourceType }} not deleted in namespace ${namespace}. Error: ${(e as Error).message}`), res);
      }
    
      
      res.status(200).json({
        kind: 'Status',
        apiVersion: 'v1',
        metadata: {},
        status: 'Success',
        details: {
          kind: '{{ $.ResourceType }}'
        }
      });
    } catch (error) {
      next(error);
    }
  });
  {{- end }}
  {{- end }}
  {{- end }}

  return router;
}
